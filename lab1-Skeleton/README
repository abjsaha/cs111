CS 111 Spring 2015
Lab 1C

Michelle Doelling
604339240
Discussion 1C

Abhijoy Saha
004252758
Discussion 1A

This portion of the project is an extention of our previous execute command function because it supports a some-what 
parallel execution by keeping track of dependencies between command trees within a command stream. The steps of this 
partially parallel execution can be broken down into the following steps. First, we process each command tree within 
the given command stream. By "processing" each command we construct a list of files the command writes to and reads to, 
stored as a double dimensional char array for the Read List and Write List. Next, we check if each command is dependent 
on commands that were processed before it by comparing their Read Lists and Write Lists for RAW, WAR, and WAW conditions. 
Then, we add the command to the global graph's dependencies or no_dependencies list accordingly. When it comes time for 
execution after all commands are processed, we first execute all commands in the no dependencies list parallelly by 
iterating through the list in no_dependencies and forking for each command in the list, executing it with the child 
process by calling execute_command. After all no_dependencies commands are executed, we call executeDependencies. 
This waits for all commands that a command is dependent on to finish before executing itself. 

To our knowledge, our project does not have major limitations, as the functionality of it seems to be working properly. 
However, a big limitation is the fact that it is only some-what parallel. Only command trees can be executed in parallel, 
not individual commands within a command tree. So if a command tree is composed of many commands but only one is 
dependent on a single command in another tree, the entire tree must wait to be executed after the other entire command 
tree. Overall, this portion of our project helps support faster execution by executing command trees that clearly should 
not have to wait for other commands, but it does not improve timing drastically because of these limitations. 